.grid{
    display: grid;
    grid-template-columns: 2% 3% 90% 3% 2%;
    /* justify-content:space-evenly;
    align-items: center;
    align-content: center; */
}
.grid img{
    width: 100%;
    height: auto;
    padding: border-box;
}

.img{
    /* All the images are different sizes! Use CSS to make the grid images 90% of the size of their grid container
Hint: There is also an image on the page that is not part of the grid, you have to be more specific than just styling img
Change the height and width of images to 90%
Give images 5px of padding

Give all even grid children a 5px dashed orange border
Hint: use pseudo-classes!
Once the styling has been applied, take a screenshot of the box model (in inspect element) of one of the even images

Style the last image to span across all three rows
Hint: use the css panel within inspect element and follow the breadcrumbs to target a specific image. From there,

Style the first image
Give the first image a solid green border of 5px
Add 10px of padding
Is this rule being overridden? Open inspect element to see which of your styling rules is taking priority
Take a screenshot of your css panel that includes the rules you created being applied

*/


}

.item1, .item2, .item3, .item4, .item5, .item6, .item7, .item8, .item9{
    height: 90%;
    width: 90%;
    padding: 5px;
}

.item2, .item4, .item6, .item8{
    border: 5px dashed orange;
}

/* .item9{
    grid-row: span 3;
} */

.item1{
    border: 5px solid green;
    padding: 10px;
}

.grid img{
    grid-column: 3/span 1;
}

img:hover{
    box-shadow: 10px 10px 5px #888888;
    transition: box-shadow 0.5s ease;
}

@media all and (min-width: 750px){
    .grid{
        display: grid;
        grid-template-columns: 2% 44% 90% 44% 2%;
    }
}

    .grid img:nth-child(odd) {
        grid-column: 2/span 1;
    }
    .grid img:nth-child(even) {
        grid-column: 4/span 1;
    }

@media (prefers-reduced-motion: reduce){
    img{
        transition: none;
    }
}